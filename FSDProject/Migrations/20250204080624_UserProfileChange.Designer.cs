// <auto-generated />
using FSDProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FSDProject.Migrations
{
    [DbContext(typeof(FSDProjectContext))]
    [Migration("20250204080624_UserProfileChange")]
    partial class UserProfileChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FSDProject.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseDatabaseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("CoursePrice")
                        .HasColumnType("real");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseDatabaseId");

                    b.HasIndex("ScoreId");

                    b.HasIndex("UserAccId");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseDatabaseId = 1,
                            CourseDuration = "60 minutes",
                            CourseName = "English for Beginners",
                            CoursePrice = 10.5f
                        },
                        new
                        {
                            CourseId = 2,
                            CourseDatabaseId = 1,
                            CourseDuration = "90 minutes",
                            CourseName = "Advanced English",
                            CoursePrice = 15f
                        },
                        new
                        {
                            CourseId = 3,
                            CourseDatabaseId = 2,
                            CourseDuration = "50 minutes",
                            CourseName = "Burmese Basics",
                            CoursePrice = 8f
                        },
                        new
                        {
                            CourseId = 4,
                            CourseDatabaseId = 2,
                            CourseDuration = "75 minutes",
                            CourseName = "Conversational Burmese",
                            CoursePrice = 12f
                        },
                        new
                        {
                            CourseId = 5,
                            CourseDatabaseId = 3,
                            CourseDuration = "55 minutes",
                            CourseName = "Malay Language Essentials",
                            CoursePrice = 9.5f
                        },
                        new
                        {
                            CourseId = 6,
                            CourseDatabaseId = 4,
                            CourseDuration = "65 minutes",
                            CourseName = "Hindi for Travelers",
                            CoursePrice = 11f
                        });
                });

            modelBuilder.Entity("FSDProject.Domain.CourseDatabase", b =>
                {
                    b.Property<int>("CourseDatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseDatabaseId"));

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseDatabaseId");

                    b.ToTable("CourseDatabase");

                    b.HasData(
                        new
                        {
                            CourseDatabaseId = 1,
                            LanguageName = "English"
                        },
                        new
                        {
                            CourseDatabaseId = 2,
                            LanguageName = "Burmese"
                        },
                        new
                        {
                            CourseDatabaseId = 3,
                            LanguageName = "Malay"
                        },
                        new
                        {
                            CourseDatabaseId = 4,
                            LanguageName = "Hindi"
                        });
                });

            modelBuilder.Entity("FSDProject.Domain.RewardShop", b =>
                {
                    b.Property<int>("RewardShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardShopId"));

                    b.Property<string>("PointCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RewardType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardShopId");

                    b.ToTable("RewardShop");

                    b.HasData(
                        new
                        {
                            RewardShopId = 1,
                            PointCost = "500 points",
                            RewardType = "Monitor"
                        },
                        new
                        {
                            RewardShopId = 2,
                            PointCost = "450 points",
                            RewardType = "Microphone"
                        },
                        new
                        {
                            RewardShopId = 3,
                            PointCost = "1000 points",
                            RewardType = "Laptop"
                        },
                        new
                        {
                            RewardShopId = 4,
                            PointCost = "300 points",
                            RewardType = "PowerBank"
                        },
                        new
                        {
                            RewardShopId = 5,
                            PointCost = "600 points",
                            RewardType = "AppleWatch"
                        });
                });

            modelBuilder.Entity("FSDProject.Domain.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"));

                    b.Property<int?>("PointsAwarded")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("FSDProject.Domain.StoreItem", b =>
                {
                    b.Property<int>("StoreItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreItemId"));

                    b.Property<int?>("Answer")
                        .HasColumnType("int");

                    b.Property<int>("CourseDatabaseId")
                        .HasColumnType("int");

                    b.Property<string>("MultipleChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreItemId");

                    b.HasIndex("CourseDatabaseId");

                    b.ToTable("StoreItem");

                    b.HasData(
                        new
                        {
                            StoreItemId = 1,
                            Answer = 3,
                            CourseDatabaseId = 4,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "How do you say 'How are you' in Hindi?"
                        },
                        new
                        {
                            StoreItemId = 2,
                            Answer = 1,
                            CourseDatabaseId = 4,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What does this sentence 'तुम किस विषय में रुचि रखते हो? ' mean?"
                        },
                        new
                        {
                            StoreItemId = 3,
                            Answer = 2,
                            CourseDatabaseId = 4,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What should you say infront of your parents when you greet them in a informal tone"
                        },
                        new
                        {
                            StoreItemId = 4,
                            Answer = 1,
                            CourseDatabaseId = 4,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "'यह जगह कहाँ है?' means 'Where is this place?'. Is this true or false?"
                        },
                        new
                        {
                            StoreItemId = 5,
                            Answer = 3,
                            CourseDatabaseId = 1,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Which word is a noun?"
                        },
                        new
                        {
                            StoreItemId = 6,
                            Answer = 1,
                            CourseDatabaseId = 1,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Which word is an adjective?"
                        },
                        new
                        {
                            StoreItemId = 7,
                            Answer = 3,
                            CourseDatabaseId = 1,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Which sentence is grammatically correct?"
                        },
                        new
                        {
                            StoreItemId = 8,
                            Answer = 4,
                            CourseDatabaseId = 1,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Which sentence uses 'their' correctly?"
                        },
                        new
                        {
                            StoreItemId = 9,
                            Answer = 2,
                            CourseDatabaseId = 3,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What does the Malay word 'Selamat' mean?"
                        },
                        new
                        {
                            StoreItemId = 10,
                            Answer = 4,
                            CourseDatabaseId = 3,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What is the Malay word for 'Thank you'?"
                        },
                        new
                        {
                            StoreItemId = 11,
                            Answer = 4,
                            CourseDatabaseId = 3,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Which malay sentence is correct when speaking to elders?"
                        },
                        new
                        {
                            StoreItemId = 12,
                            Answer = 1,
                            CourseDatabaseId = 3,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Does this sentence 'Saya suka makan nasi lemak di waktu pag' mean ' I like to eat nasi lemak in the morning'?"
                        },
                        new
                        {
                            StoreItemId = 13,
                            Answer = 1,
                            CourseDatabaseId = 2,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What is the Burmese word for 'water'?"
                        },
                        new
                        {
                            StoreItemId = 14,
                            Answer = 2,
                            CourseDatabaseId = 2,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What does 'မင်္ဂလာပါ' mean?"
                        },
                        new
                        {
                            StoreItemId = 15,
                            Answer = 4,
                            CourseDatabaseId = 2,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "Which word is a Burmese noun?"
                        },
                        new
                        {
                            StoreItemId = 16,
                            Answer = 3,
                            CourseDatabaseId = 2,
                            MultipleChoice = "1. Kaise ho, 2. Kaise hai, 3. Aap kaise hai, 4. Tum kaise ho",
                            Questions = "What is the plural form of 'ပန်းသီး' (apple) in Burmese?"
                        });
                });

            modelBuilder.Entity("FSDProject.Domain.UserAcc", b =>
                {
                    b.Property<int>("UserAccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAccId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAccId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserAcc");

                    b.HasData(
                        new
                        {
                            UserAccId = 1,
                            Email = "admin@example.com",
                            Password = "hashed_password_here",
                            UserProfileId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserAccId = 2,
                            Email = "test.user@example.com",
                            Password = "hashed_password_here",
                            UserProfileId = 2,
                            Username = "test_user"
                        });
                });

            modelBuilder.Entity("FSDProject.Domain.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentPoints")
                        .HasColumnType("int");

                    b.Property<int?>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RewardId");

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            UserProfileId = 1,
                            CourseId = 1,
                            CurrentPoints = 50,
                            RewardId = 1,
                            Status = "50%"
                        },
                        new
                        {
                            UserProfileId = 2,
                            CourseId = 1,
                            CurrentPoints = 100,
                            RewardId = 1,
                            Status = "80%"
                        });
                });

            modelBuilder.Entity("FSDProject.Domain.Course", b =>
                {
                    b.HasOne("FSDProject.Domain.CourseDatabase", "CourseDatabase")
                        .WithMany()
                        .HasForeignKey("CourseDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSDProject.Domain.Score", "Score")
                        .WithMany("Courses")
                        .HasForeignKey("ScoreId");

                    b.HasOne("FSDProject.Domain.UserAcc", "UserAcc")
                        .WithMany("Courses")
                        .HasForeignKey("UserAccId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CourseDatabase");

                    b.Navigation("Score");

                    b.Navigation("UserAcc");
                });

            modelBuilder.Entity("FSDProject.Domain.Score", b =>
                {
                    b.HasOne("FSDProject.Domain.StoreItem", "StoreItem")
                        .WithMany("Scores")
                        .HasForeignKey("StoreItemId");

                    b.HasOne("FSDProject.Domain.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreItem");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.StoreItem", b =>
                {
                    b.HasOne("FSDProject.Domain.CourseDatabase", "CourseDatabase")
                        .WithMany("StoreItems")
                        .HasForeignKey("CourseDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseDatabase");
                });

            modelBuilder.Entity("FSDProject.Domain.UserAcc", b =>
                {
                    b.HasOne("FSDProject.Domain.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.UserProfile", b =>
                {
                    b.HasOne("FSDProject.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FSDProject.Domain.RewardShop", "Reward")
                        .WithMany("UserProfile")
                        .HasForeignKey("RewardId");

                    b.Navigation("Course");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("FSDProject.Domain.CourseDatabase", b =>
                {
                    b.Navigation("StoreItems");
                });

            modelBuilder.Entity("FSDProject.Domain.RewardShop", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.Score", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("FSDProject.Domain.StoreItem", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("FSDProject.Domain.UserAcc", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
