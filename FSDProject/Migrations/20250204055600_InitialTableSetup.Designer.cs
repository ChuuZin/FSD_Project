// <auto-generated />
using FSDProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FSDProject.Migrations
{
    [DbContext(typeof(FSDProjectContext))]
    [Migration("20250204055600_InitialTableSetup")]
    partial class InitialTableSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FSDProject.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseDatabaseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("CoursePrice")
                        .HasColumnType("real");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseDatabaseId");

                    b.HasIndex("ScoreId");

                    b.HasIndex("UserAccId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("FSDProject.Domain.CourseDatabase", b =>
                {
                    b.Property<int>("CourseDatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseDatabaseId"));

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseDatabaseId");

                    b.ToTable("CourseDatabase");
                });

            modelBuilder.Entity("FSDProject.Domain.RewardShop", b =>
                {
                    b.Property<int>("RewardShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardShopId"));

                    b.Property<string>("PointCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RewardType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardShopId");

                    b.ToTable("RewardShop");
                });

            modelBuilder.Entity("FSDProject.Domain.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"));

                    b.Property<int?>("PointsAwarded")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("FSDProject.Domain.StoreItem", b =>
                {
                    b.Property<int>("StoreItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreItemId"));

                    b.Property<int?>("Answer")
                        .HasColumnType("int");

                    b.Property<int>("CourseDatabaseId")
                        .HasColumnType("int");

                    b.Property<string>("MultipleChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreItemId");

                    b.HasIndex("CourseDatabaseId");

                    b.ToTable("StoreItem");
                });

            modelBuilder.Entity("FSDProject.Domain.UserAcc", b =>
                {
                    b.Property<int>("UserAccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAccId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAccId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserAcc");
                });

            modelBuilder.Entity("FSDProject.Domain.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentPoints")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RewardId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.Course", b =>
                {
                    b.HasOne("FSDProject.Domain.CourseDatabase", "CourseDatabase")
                        .WithMany()
                        .HasForeignKey("CourseDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSDProject.Domain.Score", "Score")
                        .WithMany("Courses")
                        .HasForeignKey("ScoreId");

                    b.HasOne("FSDProject.Domain.UserAcc", "UserAcc")
                        .WithMany("Courses")
                        .HasForeignKey("UserAccId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CourseDatabase");

                    b.Navigation("Score");

                    b.Navigation("UserAcc");
                });

            modelBuilder.Entity("FSDProject.Domain.Score", b =>
                {
                    b.HasOne("FSDProject.Domain.StoreItem", "StoreItem")
                        .WithMany("Scores")
                        .HasForeignKey("StoreItemId");

                    b.HasOne("FSDProject.Domain.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreItem");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.StoreItem", b =>
                {
                    b.HasOne("FSDProject.Domain.CourseDatabase", "CourseDatabase")
                        .WithMany("StoreItems")
                        .HasForeignKey("CourseDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseDatabase");
                });

            modelBuilder.Entity("FSDProject.Domain.UserAcc", b =>
                {
                    b.HasOne("FSDProject.Domain.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.UserProfile", b =>
                {
                    b.HasOne("FSDProject.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FSDProject.Domain.RewardShop", "Reward")
                        .WithMany("UserProfile")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("FSDProject.Domain.CourseDatabase", b =>
                {
                    b.Navigation("StoreItems");
                });

            modelBuilder.Entity("FSDProject.Domain.RewardShop", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FSDProject.Domain.Score", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("FSDProject.Domain.StoreItem", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("FSDProject.Domain.UserAcc", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
